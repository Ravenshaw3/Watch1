version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: watch1-postgres
    environment:
      POSTGRES_DB: watch1
      POSTGRES_USER: watch1
      POSTGRES_PASSWORD: watch1_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - watch1-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: watch1-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - watch1-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: watch1-backend
    environment:
      - DATABASE_URL=postgresql://watch1:watch1_password@postgres:5432/watch1
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - media_files:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - watch1-network
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: watch1-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - watch1-network
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: watch1-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - watch1-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: watch1-celery-worker
    environment:
      - DATABASE_URL=postgresql://watch1:watch1_password@postgres:5432/watch1
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - watch1-network
    restart: unless-stopped
    command: celery -A main.celery worker --loglevel=info

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: watch1-celery-beat
    environment:
      - DATABASE_URL=postgresql://watch1:watch1_password@postgres:5432/watch1
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - watch1-network
    restart: unless-stopped
    command: celery -A main.celery beat --loglevel=info

volumes:
  postgres_data:
  redis_data:
  media_files:

networks:
  watch1-network:
    driver: bridge
